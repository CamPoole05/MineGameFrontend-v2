{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cpoole01\\\\OneDrive - Hearst\\\\Documents\\\\Desktop\\\\Repos\\\\MineGameFrontEnd\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    const fetchData = async () => {\n      const apiUrl = 'http://localhost:5000/YourController/NewGrid?width=5&height=5';\n      const response = await fetch(apiUrl);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Grid Data:', data);\n\n        // Now you can work with the returned JSON data\n        // For example, you can loop through rows and columns\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            const rowArray = data[key];\n            console.log(`Row ${key}:`, rowArray);\n          }\n        }\n      } else {\n        console.error(`HTTP error! Status: ${response.status}`);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mine Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"App-body\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","jsxDEV","_jsxDEV","App","_s","useEffect","fetchData","apiUrl","response","fetch","ok","data","json","console","log","key","hasOwnProperty","rowArray","error","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/cpoole01/OneDrive - Hearst/Documents/Desktop/Repos/MineGameFrontEnd/my-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const apiUrl = 'http://localhost:5000/YourController/NewGrid?width=5&height=5';\n      const response = await fetch(apiUrl);\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Grid Data:', data);\n\n        // Now you can work with the returned JSON data\n        // For example, you can loop through rows and columns\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            const rowArray = data[key];\n            console.log(`Row ${key}:`, rowArray);\n          }\n        }\n      } else {\n        console.error(`HTTP error! Status: ${response.status}`);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Mine Game</h1>\n      </header>\n      <body className=\"App-body\">\n        <p id=\"grid\"></p>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEbC,SAAS,CAAC,MAAM;IACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,MAAM,GAAG,+DAA+D;MAC9E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;MAEpC,IAAIC,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,IAAI,CAAC;;QAE/B;QACA;QACA,KAAK,MAAMI,GAAG,IAAIJ,IAAI,EAAE;UACtB,IAAIA,IAAI,CAACK,cAAc,CAACD,GAAG,CAAC,EAAE;YAC5B,MAAME,QAAQ,GAAGN,IAAI,CAACI,GAAG,CAAC;YAC1BF,OAAO,CAACC,GAAG,CAAE,OAAMC,GAAI,GAAE,EAAEE,QAAQ,CAAC;UACtC;QACF;MACF,CAAC,MAAM;QACLJ,OAAO,CAACK,KAAK,CAAE,uBAAsBV,QAAQ,CAACW,MAAO,EAAC,CAAC;MACzD;IACF,CAAC;IAEDb,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEJ,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnB,OAAA;MAAQkB,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5BnB,OAAA;QAAAmB,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACTvB,OAAA;MAAMkB,SAAS,EAAC,UAAU;MAAAC,QAAA,eACxBnB,OAAA;QAAGwB,EAAE,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACrB,EAAA,CArCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
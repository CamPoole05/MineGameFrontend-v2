{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cpoole01\\\\OneDrive - Hearst\\\\Documents\\\\Desktop\\\\Repos\\\\MineGameFrontEnd\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet gridData = [];\nconst data = \"\";\nfunction App() {\n  _s();\n  async function makeMove() {\n    const stringGrid = gridData.map(row => row.join(',')).join(';'); // Convert 2D array to a string\n    const rowWidth = gridData[0].length;\n    const apiUrl = `https://localhost:7095/api/makemove?minesHit=0&stringGrid=${stringGrid}&rowWidth=${rowWidth}&dir=u`;\n    console.log(apiUrl);\n    const gridresponse = await fetch(apiUrl);\n    const result = await gridresponse.json();\n    console.log(result);\n  }\n  async function getGrid() {\n    gridData = [];\n    const gridresponse = await fetch('https://localhost:7095/api/hello?width=6&height=6');\n    const json = await gridresponse.json();\n    let data = \"\";\n    for (const key in json) {\n      if (json.hasOwnProperty(key)) {\n        const rowArray = json[key];\n        gridData.push(rowArray);\n        const updatedRow = rowArray.map(cell => cell === 'M' ? '-' : cell);\n        console.log(`Row ${key}:`, updatedRow);\n        data += \"|\" + updatedRow.join('|') + \"|<br>\";\n      }\n    }\n    console.log(gridData);\n  }\n  useEffect(() => {\n    getGrid();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mine Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"grid\",\n        dangerouslySetInnerHTML: {\n          __html: data || 'Loading...'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: makeMove,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Move\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","gridData","data","App","_s","makeMove","stringGrid","map","row","join","rowWidth","length","apiUrl","console","log","gridresponse","fetch","result","json","getGrid","key","hasOwnProperty","rowArray","push","updatedRow","cell","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","dangerouslySetInnerHTML","__html","onClick","_c","$RefreshReg$"],"sources":["C:/Users/cpoole01/OneDrive - Hearst/Documents/Desktop/Repos/MineGameFrontEnd/my-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\n\nlet gridData = [];\nconst data = \"\";\n\nfunction App() {\n\n  \n  \n\n  async function makeMove() {\n    const stringGrid = gridData.map(row => row.join(',')).join(';'); // Convert 2D array to a string\n    const rowWidth = gridData[0].length;\n  \n    const apiUrl = `https://localhost:7095/api/makemove?minesHit=0&stringGrid=${stringGrid}&rowWidth=${rowWidth}&dir=u`;\n  \n    console.log(apiUrl);\n  \n    const gridresponse = await fetch(apiUrl);\n    const result = await gridresponse.json();\n    console.log(result);\n  }\n\n  async function getGrid()\n    {\n      gridData = []\n      const gridresponse = await fetch('https://localhost:7095/api/hello?width=6&height=6');\n      const json = await gridresponse.json();\n      let data = \"\";\n      for (const key in json) {\n        if (json.hasOwnProperty(key)) {\n          const rowArray = json[key];\n          gridData.push(rowArray);\n          const updatedRow = rowArray.map(cell => (cell === 'M' ? '-' : cell));\n          console.log(`Row ${key}:`, updatedRow);\n          data += \"|\" + updatedRow.join('|') + \"|<br>\"\n        }\n      }\n      console.log(gridData);\n      \n    }\n  \n\n  useEffect(() => {\n    \n\n    \n    getGrid();\n      \n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Mine Game</h1>\n      </header>\n      <div className=\"App-body\">\n        <p id=\"grid\" dangerouslySetInnerHTML={{ __html: data || 'Loading...' }} >\n          \n        </p>\n        <div onClick={makeMove}><p>Move</p></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}